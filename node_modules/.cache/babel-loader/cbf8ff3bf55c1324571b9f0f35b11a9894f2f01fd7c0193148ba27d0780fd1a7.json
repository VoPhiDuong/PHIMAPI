{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useParams,useSearchParams}from'react-router-dom';import{Container,Typography,Box}from'@mui/material';import axios from'axios';import MovieGrid from'../components/MovieGrid';import FilterBar from'../components/FilterBar';import Pagination from'../components/Pagination';import LoadingIndicator from'../components/LoadingIndicator';import ErrorDisplay from'../components/ErrorDisplay';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Country=()=>{const{slug}=useParams();const[searchParams,setSearchParams]=useSearchParams();const[movies,setMovies]=useState([]);const[countryInfo,setCountryInfo]=useState(null);const[loading,setLoading]=useState(true);const[error,setError]=useState(null);const[totalPages,setTotalPages]=useState(1);// Lấy các tham số từ URL\nconst page=parseInt(searchParams.get('page'))||1;const sortField=searchParams.get('sort_field')||'modified.time';const sortType=searchParams.get('sort_type')||'desc';const sortLang=searchParams.get('sort_lang')||'';const category=searchParams.get('category')||'';const year=searchParams.get('year')||'';const limit=parseInt(searchParams.get('limit'))||24;// Lấy thông tin quốc gia và danh sách phim\nuseEffect(()=>{const fetchCountryMovies=async()=>{try{setLoading(true);setError(null);// Lấy thông tin quốc gia\nconst countriesResponse=await axios.get('https://phimapi.com/quoc-gia');if(countriesResponse.data){const foundCountry=countriesResponse.data.find(c=>c.slug===slug);if(foundCountry){setCountryInfo(foundCountry);}}// Xây dựng URL với các tham số lọc\nlet url=\"https://phimapi.com/v1/api/quoc-gia/\".concat(slug,\"?page=\").concat(page,\"&sort_field=\").concat(sortField,\"&sort_type=\").concat(sortType);if(sortLang)url+=\"&sort_lang=\".concat(sortLang);if(category)url+=\"&category=\".concat(category);if(year)url+=\"&year=\".concat(year);if(limit)url+=\"&limit=\".concat(limit);const response=await axios.get(url);if(response.data){var _response$data$pagina;setMovies(response.data.items||[]);setTotalPages(((_response$data$pagina=response.data.pagination)===null||_response$data$pagina===void 0?void 0:_response$data$pagina.totalPages)||1);}setLoading(false);}catch(err){console.error('Error fetching country movies:',err);setError('Đã xảy ra lỗi khi tải danh sách phim. Vui lòng thử lại sau.');setLoading(false);}};fetchCountryMovies();},[slug,page,sortField,sortType,sortLang,category,year,limit]);// Xử lý khi thay đổi trang\nconst handlePageChange=(event,value)=>{const newSearchParams=new URLSearchParams(searchParams);newSearchParams.set('page',value);setSearchParams(newSearchParams);// Cuộn lên đầu trang\nwindow.scrollTo({top:0,behavior:'smooth'});};// Xử lý khi thay đổi bộ lọc\nconst handleFilterChange=filters=>{const newSearchParams=new URLSearchParams();// Đặt lại trang về 1 khi thay đổi bộ lọc\nnewSearchParams.set('page','1');// Thêm các tham số lọc vào URL\nif(filters.sortField)newSearchParams.set('sort_field',filters.sortField);if(filters.sortType)newSearchParams.set('sort_type',filters.sortType);if(filters.sortLang)newSearchParams.set('sort_lang',filters.sortLang);if(filters.category)newSearchParams.set('category',filters.category);if(filters.year)newSearchParams.set('year',filters.year);if(filters.limit)newSearchParams.set('limit',filters.limit);setSearchParams(newSearchParams);};if(loading&&page===1){return/*#__PURE__*/_jsx(LoadingIndicator,{message:\"\\u0110ang t\\u1EA3i danh s\\xE1ch phim...\"});}if(error){return/*#__PURE__*/_jsx(ErrorDisplay,{message:error,onRetry:()=>window.location.reload()});}return/*#__PURE__*/_jsxs(Container,{maxWidth:\"xl\",sx:{py:4},children:[/*#__PURE__*/_jsx(Typography,{variant:\"h4\",component:\"h1\",gutterBottom:true,children:countryInfo?\"Qu\\u1ED1c gia: \".concat(countryInfo.name):\"Qu\\u1ED1c gia: \".concat(slug)}),/*#__PURE__*/_jsx(FilterBar,{initialFilters:{sortField,sortType,sortLang,category,year,limit},onFilterChange:handleFilterChange,hideCountry:true// Ẩn bộ lọc quốc gia vì đã chọn quốc gia rồi\n}),loading?/*#__PURE__*/_jsx(Box,{sx:{my:4,display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(LoadingIndicator,{message:\"\\u0110ang t\\u1EA3i...\"})}):movies.length>0?/*#__PURE__*/_jsx(MovieGrid,{movies:movies}):/*#__PURE__*/_jsx(Typography,{variant:\"body1\",sx:{my:4,textAlign:'center'},children:\"Kh\\xF4ng t\\xECm th\\u1EA5y phim n\\xE0o thu\\u1ED9c qu\\u1ED1c gia n\\xE0y.\"}),totalPages>1&&/*#__PURE__*/_jsx(Box,{sx:{mt:4,display:'flex',justifyContent:'center'},children:/*#__PURE__*/_jsx(Pagination,{count:totalPages,page:page,onChange:handlePageChange})})]});};export default Country;","map":{"version":3,"names":["React","useState","useEffect","useParams","useSearchParams","Container","Typography","Box","axios","MovieGrid","FilterBar","Pagination","LoadingIndicator","ErrorDisplay","jsx","_jsx","jsxs","_jsxs","Country","slug","searchParams","setSearchParams","movies","setMovies","countryInfo","setCountryInfo","loading","setLoading","error","setError","totalPages","setTotalPages","page","parseInt","get","sortField","sortType","sortLang","category","year","limit","fetchCountryMovies","countriesResponse","data","foundCountry","find","c","url","concat","response","_response$data$pagina","items","pagination","err","console","handlePageChange","event","value","newSearchParams","URLSearchParams","set","window","scrollTo","top","behavior","handleFilterChange","filters","message","onRetry","location","reload","maxWidth","sx","py","children","variant","component","gutterBottom","name","initialFilters","onFilterChange","hideCountry","my","display","justifyContent","length","textAlign","mt","count","onChange"],"sources":["D:/Phim API/src/pages/Country.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Container, Typography, Box } from '@mui/material';\nimport axios from 'axios';\n\nimport MovieGrid from '../components/MovieGrid';\nimport FilterBar from '../components/FilterBar';\nimport Pagination from '../components/Pagination';\nimport LoadingIndicator from '../components/LoadingIndicator';\nimport ErrorDisplay from '../components/ErrorDisplay';\n\nconst Country = () => {\n  const { slug } = useParams();\n  const [searchParams, setSearchParams] = useSearchParams();\n  \n  const [movies, setMovies] = useState([]);\n  const [countryInfo, setCountryInfo] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [totalPages, setTotalPages] = useState(1);\n  \n  // Lấy các tham số từ URL\n  const page = parseInt(searchParams.get('page')) || 1;\n  const sortField = searchParams.get('sort_field') || 'modified.time';\n  const sortType = searchParams.get('sort_type') || 'desc';\n  const sortLang = searchParams.get('sort_lang') || '';\n  const category = searchParams.get('category') || '';\n  const year = searchParams.get('year') || '';\n  const limit = parseInt(searchParams.get('limit')) || 24;\n\n  // Lấy thông tin quốc gia và danh sách phim\n  useEffect(() => {\n    const fetchCountryMovies = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        \n        // Lấy thông tin quốc gia\n        const countriesResponse = await axios.get('https://phimapi.com/quoc-gia');\n        if (countriesResponse.data) {\n          const foundCountry = countriesResponse.data.find(c => c.slug === slug);\n          if (foundCountry) {\n            setCountryInfo(foundCountry);\n          }\n        }\n        \n        // Xây dựng URL với các tham số lọc\n        let url = `https://phimapi.com/v1/api/quoc-gia/${slug}?page=${page}&sort_field=${sortField}&sort_type=${sortType}`;\n        \n        if (sortLang) url += `&sort_lang=${sortLang}`;\n        if (category) url += `&category=${category}`;\n        if (year) url += `&year=${year}`;\n        if (limit) url += `&limit=${limit}`;\n        \n        const response = await axios.get(url);\n\n        if (response.data) {\n          setMovies(response.data.items || []);\n          setTotalPages(response.data.pagination?.totalPages || 1);\n        }\n        \n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching country movies:', err);\n        setError('Đã xảy ra lỗi khi tải danh sách phim. Vui lòng thử lại sau.');\n        setLoading(false);\n      }\n    };\n\n    fetchCountryMovies();\n  }, [slug, page, sortField, sortType, sortLang, category, year, limit]);\n\n  // Xử lý khi thay đổi trang\n  const handlePageChange = (event, value) => {\n    const newSearchParams = new URLSearchParams(searchParams);\n    newSearchParams.set('page', value);\n    setSearchParams(newSearchParams);\n    \n    // Cuộn lên đầu trang\n    window.scrollTo({ top: 0, behavior: 'smooth' });\n  };\n\n  // Xử lý khi thay đổi bộ lọc\n  const handleFilterChange = (filters) => {\n    const newSearchParams = new URLSearchParams();\n    \n    // Đặt lại trang về 1 khi thay đổi bộ lọc\n    newSearchParams.set('page', '1');\n    \n    // Thêm các tham số lọc vào URL\n    if (filters.sortField) newSearchParams.set('sort_field', filters.sortField);\n    if (filters.sortType) newSearchParams.set('sort_type', filters.sortType);\n    if (filters.sortLang) newSearchParams.set('sort_lang', filters.sortLang);\n    if (filters.category) newSearchParams.set('category', filters.category);\n    if (filters.year) newSearchParams.set('year', filters.year);\n    if (filters.limit) newSearchParams.set('limit', filters.limit);\n    \n    setSearchParams(newSearchParams);\n  };\n\n  if (loading && page === 1) {\n    return <LoadingIndicator message=\"Đang tải danh sách phim...\" />;\n  }\n\n  if (error) {\n    return <ErrorDisplay message={error} onRetry={() => window.location.reload()} />;\n  }\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n      <Typography variant=\"h4\" component=\"h1\" gutterBottom>\n        {countryInfo ? `Quốc gia: ${countryInfo.name}` : `Quốc gia: ${slug}`}\n      </Typography>\n      \n      {/* Thanh lọc */}\n      <FilterBar\n        initialFilters={{\n          sortField,\n          sortType,\n          sortLang,\n          category,\n          year,\n          limit\n        }}\n        onFilterChange={handleFilterChange}\n        hideCountry={true} // Ẩn bộ lọc quốc gia vì đã chọn quốc gia rồi\n      />\n      \n      {/* Danh sách phim */}\n      {loading ? (\n        <Box sx={{ my: 4, display: 'flex', justifyContent: 'center' }}>\n          <LoadingIndicator message=\"Đang tải...\" />\n        </Box>\n      ) : movies.length > 0 ? (\n        <MovieGrid movies={movies} />\n      ) : (\n        <Typography variant=\"body1\" sx={{ my: 4, textAlign: 'center' }}>\n          Không tìm thấy phim nào thuộc quốc gia này.\n        </Typography>\n      )}\n      \n      {/* Phân trang */}\n      {totalPages > 1 && (\n        <Box sx={{ mt: 4, display: 'flex', justifyContent: 'center' }}>\n          <Pagination\n            count={totalPages}\n            page={page}\n            onChange={handlePageChange}\n          />\n        </Box>\n      )}\n    </Container>\n  );\n};\n\nexport default Country;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}