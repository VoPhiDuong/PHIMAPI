{"ast":null,"code":"var _jsxFileName = \"D:\\\\Phim API\\\\src\\\\pages\\\\MovieDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Box, Tabs, Tab, Typography } from '@mui/material';\nimport axios from 'axios';\nimport MovieInfo from '../components/MovieInfo';\nimport VideoPlayer from '../components/VideoPlayer';\nimport EpisodeSelector from '../components/EpisodeSelector';\nimport RelatedMovies from '../components/RelatedMovies';\nimport CommentSection from '../components/CommentSection';\nimport LoadingIndicator from '../components/LoadingIndicator';\nimport ErrorDisplay from '../components/ErrorDisplay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieDetail = () => {\n  _s();\n  const {\n    slug\n  } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [currentTab, setCurrentTab] = useState(0);\n  const [currentEpisode, setCurrentEpisode] = useState(null);\n  const [currentServer, setCurrentServer] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [relatedMovies, setRelatedMovies] = useState([]);\n\n  // Lấy phim liên quan\n  const fetchRelatedMovies = useCallback(async category => {\n    try {\n      const response = await axios.get(`https://phimapi.com/v1/api/the-loai/${category}?page=1&sort_field=modified.time&sort_type=desc&limit=6`);\n      if (response.data && response.data.items) {\n        // Lọc bỏ phim hiện tại khỏi danh sách phim liên quan\n        const filtered = response.data.items.filter(item => item.slug !== slug);\n        setRelatedMovies(filtered.slice(0, 6));\n      }\n    } catch (err) {\n      console.error('Error fetching related movies:', err);\n    }\n  }, [slug]);\n\n  // Lấy thông tin phim từ API\n  useEffect(() => {\n    const fetchMovieDetail = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await axios.get(`https://phimapi.com/phim/${slug}`);\n        console.log('API Response:', response.data);\n        if (response.data && response.data.movie) {\n          // Kết hợp movie data với episodes từ response\n          const movieData = {\n            ...response.data.movie,\n            episodes: response.data.episodes || [],\n            medias: response.data.medias || []\n          };\n          setMovie(movieData);\n          console.log('Movie data:', movieData);\n          console.log('Episodes structure:', movieData.episodes);\n          console.log('Medias structure:', movieData.medias);\n\n          // Expose movie data globally for debugging\n          window.movieDebugData = movieData;\n\n          // Lấy phim liên quan\n          if (movieData.category && movieData.category.length > 0) {\n            const category = movieData.category[0].slug;\n            fetchRelatedMovies(category);\n          }\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching movie details:', err);\n        setError('Đã xảy ra lỗi khi tải thông tin phim. Vui lòng thử lại sau.');\n        setLoading(false);\n      }\n    };\n    if (slug) {\n      fetchMovieDetail();\n    }\n  }, [slug, fetchRelatedMovies]);\n\n  // Thiết lập tập phim mặc định\n  useEffect(() => {\n    if (movie && (!currentEpisode || !currentServer)) {\n      console.log('=== Setting default episode and server ===');\n      console.log('Movie episodes:', movie.episodes);\n      console.log('Movie medias:', movie.medias);\n      console.log('Current episode:', currentEpisode);\n      console.log('Current server:', currentServer);\n\n      // Kiểm tra nếu episodes là array với cấu trúc server_name và server_data\n      if (Array.isArray(movie.episodes) && movie.episodes.length > 0) {\n        console.log('Episodes is array with servers:', movie.episodes);\n        const firstServerData = movie.episodes[0];\n        console.log('First server data:', firstServerData);\n        if (firstServerData && firstServerData.server_data && Array.isArray(firstServerData.server_data) && firstServerData.server_data.length > 0) {\n          const firstEpisode = firstServerData.server_data[0];\n          console.log('First episode:', firstEpisode);\n          const episodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\n          const serverName = firstServerData.server_name || '0';\n          console.log('Setting currentEpisode to:', episodeId);\n          console.log('Setting currentServer to:', serverName);\n          setCurrentEpisode(episodeId);\n          setCurrentServer(serverName);\n        } else {\n          console.error('No server_data found in first server');\n        }\n      }\n      // Kiểm tra nếu episodes là object với server keys (fallback)\n      else if (movie.episodes && typeof movie.episodes === 'object' && Object.keys(movie.episodes).length > 0) {\n        console.log('Episodes is object with servers');\n        const firstServer = Object.keys(movie.episodes)[0];\n        console.log('First server:', firstServer);\n        console.log('Episodes for first server:', movie.episodes[firstServer]);\n        if (movie.episodes[firstServer] && movie.episodes[firstServer].length > 0) {\n          const firstEpisode = movie.episodes[firstServer][0];\n          console.log('First episode:', firstEpisode);\n\n          // Xác định ID của tập phim\n          let episodeId;\n          if (typeof firstEpisode === 'object') {\n            episodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\n            console.log('Episode is object, ID:', episodeId);\n          } else {\n            episodeId = firstEpisode;\n            console.log('Episode is not object, ID:', episodeId);\n          }\n          if (episodeId) {\n            console.log('Setting current server to:', firstServer);\n            console.log('Setting current episode to:', episodeId);\n            setCurrentServer(firstServer);\n            setCurrentEpisode(episodeId);\n          } else {\n            console.error('Could not determine episode ID');\n          }\n        } else {\n          console.error('No episodes found for server:', firstServer);\n        }\n      }\n      // Fallback to medias if no episodes\n      else if (movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0) {\n        console.log('No episodes but found medias, using first media as default');\n        setCurrentEpisode('0');\n        setCurrentServer('0');\n        console.log('Setting currentEpisode and currentServer to 0');\n      } else {\n        console.log('No episodes or medias found');\n      }\n    }\n  }, [movie, currentEpisode, currentServer]);\n\n  // Xử lý khi chọn tập phim\n  const handleEpisodeSelect = (episodeId, server) => {\n    console.log('Episode selected:', {\n      episodeId,\n      server\n    });\n    setCurrentEpisode(episodeId);\n    setCurrentServer(server);\n\n    // Scroll lên đầu phần video player\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  // Xử lý khi chuyển tab\n  const handleTabChange = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      message: \"\\u0110ang t\\u1EA3i th\\xF4ng tin phim...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorDisplay, {\n      message: error,\n      onRetry: () => window.location.reload()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 12\n    }, this);\n  }\n  if (!movie) {\n    return /*#__PURE__*/_jsxDEV(ErrorDisplay, {\n      message: \"Kh\\xF4ng t\\xECm th\\u1EA5y th\\xF4ng tin phim.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Xác định URL video và tên tập phim\n  let videoUrl = null;\n  let currentEpisodeName = '';\n  let episodeTitle = '';\n  let finalVideoUrl = null;\n  if (movie && movie.episodes && currentServer && currentEpisode) {\n    console.log('Determining video URL with:', {\n      currentServer,\n      currentEpisode\n    });\n    console.log('Available episodes:', movie.episodes);\n\n    // Tìm server episodes dựa trên cấu trúc mới\n    let serverEpisodes = null;\n    if (Array.isArray(movie.episodes)) {\n      const serverData = movie.episodes.find(server => server.server_name === currentServer);\n      serverEpisodes = serverData ? serverData.server_data : null;\n    } else {\n      // Fallback cho cấu trúc cũ\n      serverEpisodes = movie.episodes[currentServer];\n    }\n    console.log('Server episodes:', serverEpisodes);\n    if (serverEpisodes) {\n      const episode = serverEpisodes.find(ep => {\n        if (typeof ep === 'object') {\n          return ep.slug === currentEpisode || ep.id === currentEpisode;\n        }\n        return ep === currentEpisode;\n      });\n      console.log('Found episode:', episode);\n      if (episode) {\n        if (typeof episode === 'object') {\n          videoUrl = episode;\n          currentEpisodeName = episode.name || `Tập ${episode.slug || episode.id}`;\n        } else {\n          // Nếu episode là string, thử tìm trong movie.medias\n          console.log('Episode is string, checking movie.medias');\n          if (movie.medias && Array.isArray(movie.medias)) {\n            console.log('Available medias:', movie.medias);\n            const media = movie.medias.find(m => m.filename === episode || m.slug === episode || m.id === episode);\n            console.log('Found media:', media);\n            if (media) {\n              videoUrl = media;\n              currentEpisodeName = `Tập ${episode}`;\n            } else {\n              // Nếu không tìm thấy trong medias, thử tìm theo index\n              const index = parseInt(episode, 10);\n              if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n                console.log(`Using media at index ${index}:`, movie.medias[index]);\n                videoUrl = movie.medias[index];\n                currentEpisodeName = `Tập ${episode}`;\n              } else {\n                console.error('Could not find media for episode:', episode);\n              }\n            }\n          } else {\n            console.error('No medias array found in movie data');\n          }\n        }\n      } else {\n        console.error('Episode not found in server episodes');\n\n        // Nếu không tìm thấy episode trong serverEpisodes, thử tìm trong movie.medias\n        if (movie.medias && Array.isArray(movie.medias)) {\n          console.log('Trying to find episode in movie.medias directly');\n          const index = parseInt(currentEpisode, 10);\n          if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n            console.log(`Using media at index ${index}:`, movie.medias[index]);\n            videoUrl = movie.medias[index];\n            currentEpisodeName = `Tập ${currentEpisode}`;\n          }\n        }\n      }\n    } else {\n      console.error('No episodes found for server:', currentServer);\n\n      // Nếu không có serverEpisodes, thử tìm trong movie.medias\n      if (movie.medias && Array.isArray(movie.medias)) {\n        console.log('No server episodes, trying movie.medias directly');\n        const index = parseInt(currentEpisode, 10);\n        if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n          console.log(`Using media at index ${index}:`, movie.medias[index]);\n          videoUrl = movie.medias[index];\n          currentEpisodeName = `Tập ${currentEpisode}`;\n        }\n      }\n    }\n\n    // Thiết lập finalVideoUrl ưu tiên link_m3u8 cho phát video trực tiếp\n    if (videoUrl) {\n      console.log('Raw videoUrl:', videoUrl);\n      if (videoUrl.link_m3u8) {\n        finalVideoUrl = videoUrl.link_m3u8;\n        console.log('Using link_m3u8:', finalVideoUrl);\n      } else if (videoUrl.link_embed) {\n        finalVideoUrl = videoUrl.link_embed;\n        console.log('Using link_embed:', finalVideoUrl);\n      } else if (videoUrl.link) {\n        finalVideoUrl = videoUrl.link;\n        console.log('Using link:', finalVideoUrl);\n      } else {\n        console.error('No valid video URL found in:', videoUrl);\n      }\n    } else {\n      console.error('No video URL found for episode:', currentEpisode);\n    }\n  } else {\n    console.log('Missing data for video URL:', {\n      hasMovie: !!movie,\n      hasEpisodes: !!(movie && movie.episodes),\n      currentServer,\n      currentEpisode\n    });\n\n    // Nếu không có episodes nhưng có medias, thử sử dụng medias trực tiếp\n    if (movie && movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0) {\n      console.log('No episodes but found medias, using first media');\n      if (!currentEpisode) {\n        setCurrentEpisode('0');\n        console.log('Setting currentEpisode to 0');\n      }\n      const index = parseInt(currentEpisode || '0', 10);\n      if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n        videoUrl = movie.medias[index];\n        console.log(`Using media at index ${index}:`, videoUrl);\n        currentEpisodeName = `Tập ${index}`;\n        if (videoUrl.link_embed) {\n          finalVideoUrl = videoUrl.link_embed;\n          console.log('Using link_embed from media:', finalVideoUrl);\n        } else if (videoUrl.link_m3u8) {\n          finalVideoUrl = videoUrl.link_m3u8;\n          console.log('Using link_m3u8 from media:', finalVideoUrl);\n        } else if (videoUrl.link) {\n          finalVideoUrl = videoUrl.link;\n          console.log('Using link from media:', finalVideoUrl);\n        }\n      }\n    }\n  }\n  episodeTitle = currentEpisodeName || (currentEpisode ? `Tập ${currentEpisode}` : '');\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    sx: {\n      py: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2,\n        p: 2,\n        bgcolor: 'background.paper',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Debug Info:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Movie: \", movie ? 'Loaded' : 'Not loaded']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Episodes: \", movie && movie.episodes ? 'Available' : 'Not available']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Episodes Structure: \", movie && movie.episodes ? JSON.stringify(Object.keys(movie.episodes)) : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Current Episode: \", currentEpisode || 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Current Server: \", currentServer || 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Video URL: \", videoUrl ? typeof videoUrl === 'object' ? JSON.stringify(videoUrl) : videoUrl : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 346,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Final Video URL: \", finalVideoUrl || 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), finalVideoUrl && movie && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(VideoPlayer, {\n        src: finalVideoUrl,\n        title: movie && movie.name ? `${movie.name} - ${episodeTitle}` : episodeTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 9\n    }, this), movie && movie.episodes && Object.keys(movie.episodes).length > 0 && /*#__PURE__*/_jsxDEV(EpisodeSelector, {\n      episodes: movie.episodes,\n      currentEpisode: currentEpisode,\n      onEpisodeSelect: handleEpisodeSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        borderBottom: 1,\n        borderColor: 'divider',\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        value: currentTab,\n        onChange: handleTabChange,\n        variant: \"scrollable\",\n        scrollButtons: \"auto\",\n        allowScrollButtonsMobile: true,\n        \"aria-label\": \"movie detail tabs\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Th\\xF4ng tin phim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"B\\xECnh lu\\u1EADn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 380,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      role: \"tabpanel\",\n      hidden: currentTab !== 0,\n      children: currentTab === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MovieInfo, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RelatedMovies, {\n          movies: relatedMovies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      role: \"tabpanel\",\n      hidden: currentTab !== 1,\n      children: currentTab === 1 && movie && movie._id && /*#__PURE__*/_jsxDEV(CommentSection, {\n        movieId: movie._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 395,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 337,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieDetail, \"vw6F+bTSDiITxATI2d1yhD5jb1E=\", false, function () {\n  return [useParams];\n});\n_c = MovieDetail;\nexport default MovieDetail;\nvar _c;\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","Container","Box","Tabs","Tab","Typography","axios","MovieInfo","VideoPlayer","EpisodeSelector","RelatedMovies","CommentSection","LoadingIndicator","ErrorDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieDetail","_s","slug","movie","setMovie","currentTab","setCurrentTab","currentEpisode","setCurrentEpisode","currentServer","setCurrentServer","loading","setLoading","error","setError","relatedMovies","setRelatedMovies","fetchRelatedMovies","category","response","get","data","items","filtered","filter","item","slice","err","console","fetchMovieDetail","log","movieData","episodes","medias","window","movieDebugData","length","Array","isArray","firstServerData","server_data","firstEpisode","episodeId","id","filename","serverName","server_name","Object","keys","firstServer","handleEpisodeSelect","server","scrollTo","top","behavior","handleTabChange","event","newValue","message","fileName","_jsxFileName","lineNumber","columnNumber","onRetry","location","reload","videoUrl","currentEpisodeName","episodeTitle","finalVideoUrl","serverEpisodes","serverData","find","episode","ep","name","media","m","index","parseInt","isNaN","link_m3u8","link_embed","link","hasMovie","hasEpisodes","maxWidth","sx","py","children","mb","p","bgcolor","borderRadius","variant","JSON","stringify","src","title","onEpisodeSelect","borderBottom","borderColor","value","onChange","scrollButtons","allowScrollButtonsMobile","label","role","hidden","movies","_id","movieId","_c","$RefreshReg$"],"sources":["D:/Phim API/src/pages/MovieDetail.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Box, Tabs, Tab, Typography } from '@mui/material';\nimport axios from 'axios';\n\nimport MovieInfo from '../components/MovieInfo';\nimport VideoPlayer from '../components/VideoPlayer';\nimport EpisodeSelector from '../components/EpisodeSelector';\nimport RelatedMovies from '../components/RelatedMovies';\nimport CommentSection from '../components/CommentSection';\nimport LoadingIndicator from '../components/LoadingIndicator';\nimport ErrorDisplay from '../components/ErrorDisplay';\n\nconst MovieDetail = () => {\n  const { slug } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [currentTab, setCurrentTab] = useState(0);\n  const [currentEpisode, setCurrentEpisode] = useState(null);\n  const [currentServer, setCurrentServer] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [relatedMovies, setRelatedMovies] = useState([]);\n\n  // Lấy phim liên quan\n  const fetchRelatedMovies = useCallback(async (category) => {\n    try {\n      const response = await axios.get(\n        `https://phimapi.com/v1/api/the-loai/${category}?page=1&sort_field=modified.time&sort_type=desc&limit=6`\n      );\n      if (response.data && response.data.items) {\n        // Lọc bỏ phim hiện tại khỏi danh sách phim liên quan\n        const filtered = response.data.items.filter(item => item.slug !== slug);\n        setRelatedMovies(filtered.slice(0, 6));\n      }\n    } catch (err) {\n      console.error('Error fetching related movies:', err);\n    }\n  }, [slug]);\n\n  // Lấy thông tin phim từ API\n  useEffect(() => {\n    const fetchMovieDetail = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await axios.get(`https://phimapi.com/phim/${slug}`);\n        console.log('API Response:', response.data);\n        if (response.data && response.data.movie) {\n          // Kết hợp movie data với episodes từ response\n          const movieData = {\n            ...response.data.movie,\n            episodes: response.data.episodes || [],\n            medias: response.data.medias || []\n          };\n          \n          setMovie(movieData);\n          console.log('Movie data:', movieData);\n          console.log('Episodes structure:', movieData.episodes);\n          console.log('Medias structure:', movieData.medias);\n          \n          // Expose movie data globally for debugging\n          window.movieDebugData = movieData;\n\n          // Lấy phim liên quan\n          if (movieData.category && movieData.category.length > 0) {\n            const category = movieData.category[0].slug;\n            fetchRelatedMovies(category);\n          }\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching movie details:', err);\n        setError('Đã xảy ra lỗi khi tải thông tin phim. Vui lòng thử lại sau.');\n        setLoading(false);\n      }\n    };\n\n    if (slug) {\n      fetchMovieDetail();\n    }\n  }, [slug, fetchRelatedMovies]);\n\n  // Thiết lập tập phim mặc định\n  useEffect(() => {\n    if (movie && (!currentEpisode || !currentServer)) {\n      console.log('=== Setting default episode and server ===');\n      console.log('Movie episodes:', movie.episodes);\n      console.log('Movie medias:', movie.medias);\n      console.log('Current episode:', currentEpisode);\n      console.log('Current server:', currentServer);\n      \n      // Kiểm tra nếu episodes là array với cấu trúc server_name và server_data\n      if (Array.isArray(movie.episodes) && movie.episodes.length > 0) {\n        console.log('Episodes is array with servers:', movie.episodes);\n        const firstServerData = movie.episodes[0];\n        console.log('First server data:', firstServerData);\n        \n        if (firstServerData && firstServerData.server_data && Array.isArray(firstServerData.server_data) && firstServerData.server_data.length > 0) {\n          const firstEpisode = firstServerData.server_data[0];\n          console.log('First episode:', firstEpisode);\n          \n          const episodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\n          const serverName = firstServerData.server_name || '0';\n          \n          console.log('Setting currentEpisode to:', episodeId);\n          console.log('Setting currentServer to:', serverName);\n          \n          setCurrentEpisode(episodeId);\n          setCurrentServer(serverName);\n        } else {\n          console.error('No server_data found in first server');\n        }\n      }\n      // Kiểm tra nếu episodes là object với server keys (fallback)\n      else if (movie.episodes && typeof movie.episodes === 'object' && Object.keys(movie.episodes).length > 0) {\n        console.log('Episodes is object with servers');\n        const firstServer = Object.keys(movie.episodes)[0];\n        console.log('First server:', firstServer);\n        console.log('Episodes for first server:', movie.episodes[firstServer]);\n        \n        if (movie.episodes[firstServer] && movie.episodes[firstServer].length > 0) {\n          const firstEpisode = movie.episodes[firstServer][0];\n          console.log('First episode:', firstEpisode);\n          \n          // Xác định ID của tập phim\n          let episodeId;\n          if (typeof firstEpisode === 'object') {\n            episodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\n            console.log('Episode is object, ID:', episodeId);\n          } else {\n            episodeId = firstEpisode;\n            console.log('Episode is not object, ID:', episodeId);\n          }\n          \n          if (episodeId) {\n            console.log('Setting current server to:', firstServer);\n            console.log('Setting current episode to:', episodeId);\n            setCurrentServer(firstServer);\n            setCurrentEpisode(episodeId);\n          } else {\n            console.error('Could not determine episode ID');\n          }\n        } else {\n          console.error('No episodes found for server:', firstServer);\n        }\n      }\n      // Fallback to medias if no episodes\n      else if (movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0) {\n        console.log('No episodes but found medias, using first media as default');\n        setCurrentEpisode('0');\n        setCurrentServer('0');\n        console.log('Setting currentEpisode and currentServer to 0');\n      }\n      else {\n        console.log('No episodes or medias found');\n      }\n    }\n  }, [movie, currentEpisode, currentServer]);\n\n  // Xử lý khi chọn tập phim\n  const handleEpisodeSelect = (episodeId, server) => {\n    console.log('Episode selected:', { episodeId, server });\n    setCurrentEpisode(episodeId);\n    setCurrentServer(server);\n    \n    // Scroll lên đầu phần video player\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  // Xử lý khi chuyển tab\n  const handleTabChange = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  if (loading) {\n    return <LoadingIndicator message=\"Đang tải thông tin phim...\" />;\n  }\n\n  if (error) {\n    return <ErrorDisplay message={error} onRetry={() => window.location.reload()} />;\n  }\n\n  if (!movie) {\n    return <ErrorDisplay message=\"Không tìm thấy thông tin phim.\" />;\n  }\n\n  // Xác định URL video và tên tập phim\n  let videoUrl = null;\n  let currentEpisodeName = '';\n  let episodeTitle = '';\n  let finalVideoUrl = null;\n\n  if (movie && movie.episodes && currentServer && currentEpisode) {\n    console.log('Determining video URL with:', { currentServer, currentEpisode });\n    console.log('Available episodes:', movie.episodes);\n    \n    // Tìm server episodes dựa trên cấu trúc mới\n    let serverEpisodes = null;\n    if (Array.isArray(movie.episodes)) {\n      const serverData = movie.episodes.find(server => server.server_name === currentServer);\n      serverEpisodes = serverData ? serverData.server_data : null;\n    } else {\n      // Fallback cho cấu trúc cũ\n      serverEpisodes = movie.episodes[currentServer];\n    }\n    console.log('Server episodes:', serverEpisodes);\n    \n    if (serverEpisodes) {\n      const episode = serverEpisodes.find(ep => {\n        if (typeof ep === 'object') {\n          return (ep.slug === currentEpisode || ep.id === currentEpisode);\n        }\n        return ep === currentEpisode;\n      });\n      \n      console.log('Found episode:', episode);\n      \n      if (episode) {\n        if (typeof episode === 'object') {\n          videoUrl = episode;\n          currentEpisodeName = episode.name || `Tập ${episode.slug || episode.id}`;\n        } else {\n          // Nếu episode là string, thử tìm trong movie.medias\n          console.log('Episode is string, checking movie.medias');\n          if (movie.medias && Array.isArray(movie.medias)) {\n            console.log('Available medias:', movie.medias);\n            const media = movie.medias.find(m => m.filename === episode || m.slug === episode || m.id === episode);\n            console.log('Found media:', media);\n            if (media) {\n              videoUrl = media;\n              currentEpisodeName = `Tập ${episode}`;\n            } else {\n              // Nếu không tìm thấy trong medias, thử tìm theo index\n              const index = parseInt(episode, 10);\n              if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n                console.log(`Using media at index ${index}:`, movie.medias[index]);\n                videoUrl = movie.medias[index];\n                currentEpisodeName = `Tập ${episode}`;\n              } else {\n                console.error('Could not find media for episode:', episode);\n              }\n            }\n          } else {\n            console.error('No medias array found in movie data');\n          }\n        }\n      } else {\n        console.error('Episode not found in server episodes');\n        \n        // Nếu không tìm thấy episode trong serverEpisodes, thử tìm trong movie.medias\n        if (movie.medias && Array.isArray(movie.medias)) {\n          console.log('Trying to find episode in movie.medias directly');\n          const index = parseInt(currentEpisode, 10);\n          if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n            console.log(`Using media at index ${index}:`, movie.medias[index]);\n            videoUrl = movie.medias[index];\n            currentEpisodeName = `Tập ${currentEpisode}`;\n          }\n        }\n      }\n    } else {\n      console.error('No episodes found for server:', currentServer);\n      \n      // Nếu không có serverEpisodes, thử tìm trong movie.medias\n      if (movie.medias && Array.isArray(movie.medias)) {\n        console.log('No server episodes, trying movie.medias directly');\n        const index = parseInt(currentEpisode, 10);\n        if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n          console.log(`Using media at index ${index}:`, movie.medias[index]);\n          videoUrl = movie.medias[index];\n          currentEpisodeName = `Tập ${currentEpisode}`;\n        }\n      }\n    }\n    \n    // Thiết lập finalVideoUrl ưu tiên link_m3u8 cho phát video trực tiếp\n    if (videoUrl) {\n      console.log('Raw videoUrl:', videoUrl);\n      if (videoUrl.link_m3u8) {\n        finalVideoUrl = videoUrl.link_m3u8;\n        console.log('Using link_m3u8:', finalVideoUrl);\n      } else if (videoUrl.link_embed) {\n        finalVideoUrl = videoUrl.link_embed;\n        console.log('Using link_embed:', finalVideoUrl);\n      } else if (videoUrl.link) {\n        finalVideoUrl = videoUrl.link;\n        console.log('Using link:', finalVideoUrl);\n      } else {\n        console.error('No valid video URL found in:', videoUrl);\n      }\n    } else {\n      console.error('No video URL found for episode:', currentEpisode);\n    }\n  } else {\n    console.log('Missing data for video URL:', { \n      hasMovie: !!movie, \n      hasEpisodes: !!(movie && movie.episodes), \n      currentServer, \n      currentEpisode \n    });\n    \n    // Nếu không có episodes nhưng có medias, thử sử dụng medias trực tiếp\n    if (movie && movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0) {\n      console.log('No episodes but found medias, using first media');\n      if (!currentEpisode) {\n        setCurrentEpisode('0');\n        console.log('Setting currentEpisode to 0');\n      }\n      \n      const index = parseInt(currentEpisode || '0', 10);\n      if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n        videoUrl = movie.medias[index];\n        console.log(`Using media at index ${index}:`, videoUrl);\n        currentEpisodeName = `Tập ${index}`;\n        \n        if (videoUrl.link_embed) {\n          finalVideoUrl = videoUrl.link_embed;\n          console.log('Using link_embed from media:', finalVideoUrl);\n        } else if (videoUrl.link_m3u8) {\n          finalVideoUrl = videoUrl.link_m3u8;\n          console.log('Using link_m3u8 from media:', finalVideoUrl);\n        } else if (videoUrl.link) {\n          finalVideoUrl = videoUrl.link;\n          console.log('Using link from media:', finalVideoUrl);\n        }\n      }\n    }\n  }\n\n  episodeTitle = currentEpisodeName || (currentEpisode ? `Tập ${currentEpisode}` : '');\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n      {/* Debug Info */}\n      <Box sx={{ mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\n        <Typography variant=\"h6\">Debug Info:</Typography>\n        <Typography variant=\"body2\">Movie: {movie ? 'Loaded' : 'Not loaded'}</Typography>\n        <Typography variant=\"body2\">Episodes: {movie && movie.episodes ? 'Available' : 'Not available'}</Typography>\n        <Typography variant=\"body2\">Episodes Structure: {movie && movie.episodes ? JSON.stringify(Object.keys(movie.episodes)) : 'N/A'}</Typography>\n        <Typography variant=\"body2\">Current Episode: {currentEpisode || 'None'}</Typography>\n        <Typography variant=\"body2\">Current Server: {currentServer || 'None'}</Typography>\n        <Typography variant=\"body2\">Video URL: {videoUrl ? (typeof videoUrl === 'object' ? JSON.stringify(videoUrl) : videoUrl) : 'None'}</Typography>\n        <Typography variant=\"body2\">Final Video URL: {finalVideoUrl || 'None'}</Typography>\n      </Box>\n\n      {/* Video Player */}\n      {finalVideoUrl && movie && (\n        <Box sx={{ mb: 4 }}>\n          <VideoPlayer\n            src={finalVideoUrl}\n            title={movie && movie.name ? `${movie.name} - ${episodeTitle}` : episodeTitle}\n          />\n        </Box>\n      )}\n\n      {/* Episode Selector */}\n      {movie && movie.episodes && Object.keys(movie.episodes).length > 0 && (\n        <EpisodeSelector\n          episodes={movie.episodes}\n          currentEpisode={currentEpisode}\n          onEpisodeSelect={handleEpisodeSelect}\n        />\n      )}\n\n      {/* Tabs */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs\n          value={currentTab}\n          onChange={handleTabChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          allowScrollButtonsMobile\n          aria-label=\"movie detail tabs\"\n        >\n          <Tab label=\"Thông tin phim\" />\n          <Tab label=\"Bình luận\" />\n        </Tabs>\n      </Box>\n\n      {/* Tab Content */}\n      <Box role=\"tabpanel\" hidden={currentTab !== 0}>\n        {currentTab === 0 && (\n          <>\n            <MovieInfo movie={movie} />\n            <RelatedMovies movies={relatedMovies} />\n          </>\n        )}\n      </Box>\n\n      <Box role=\"tabpanel\" hidden={currentTab !== 1}>\n        {currentTab === 1 && movie && movie._id && <CommentSection movieId={movie._id} />}\n      </Box>\n    </Container>\n  );\n};\n\nexport default MovieDetail;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}