{"ast":null,"code":"var _jsxFileName = \"D:\\\\Phim API\\\\src\\\\context\\\\AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { metadataApi } from '../services/api';\nimport { getFromStorage, saveToStorage } from '../utils/utils';\nimport { STORAGE_KEYS, MAX_RECENT_MOVIES, MAX_FAVORITE_MOVIES } from '../constants/constants';\n\n// Tạo context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AppProvider = ({\n  children\n}) => {\n  _s();\n  // State cho metadata\n  const [categories, setCategories] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [years, setYears] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  // State cho user preferences\n  const [recentMovies, setRecentMovies] = useState([]);\n  const [favoriteMovies, setFavoriteMovies] = useState([]);\n  const [watchHistory, setWatchHistory] = useState({});\n\n  // Lấy metadata khi component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        setLoading(true);\n\n        // Lấy danh sách thể loại\n        const categoriesResponse = await metadataApi.getCategories();\n        if (categoriesResponse.data) {\n          setCategories(categoriesResponse.data);\n        }\n\n        // Lấy danh sách quốc gia\n        const countriesResponse = await metadataApi.getCountries();\n        if (countriesResponse.data) {\n          setCountries(countriesResponse.data);\n        }\n\n        // Lấy danh sách năm\n        const yearsResponse = await metadataApi.getYears();\n        if (yearsResponse.data) {\n          setYears(yearsResponse.data);\n        }\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching metadata:', error);\n        setLoading(false);\n      }\n    };\n    fetchMetadata();\n  }, []);\n\n  // Lấy dữ liệu từ localStorage khi component mount\n  useEffect(() => {\n    const storedRecentMovies = getFromStorage(STORAGE_KEYS.RECENT_MOVIES, []);\n    const storedFavoriteMovies = getFromStorage(STORAGE_KEYS.FAVORITE_MOVIES, []);\n    const storedWatchHistory = getFromStorage(STORAGE_KEYS.WATCH_HISTORY, {});\n    setRecentMovies(storedRecentMovies);\n    setFavoriteMovies(storedFavoriteMovies);\n    setWatchHistory(storedWatchHistory);\n  }, []);\n\n  // Thêm phim vào danh sách xem gần đây\n  const addRecentMovie = movie => {\n    if (!movie || !movie._id) return;\n    setRecentMovies(prevMovies => {\n      // Lọc bỏ phim hiện tại nếu đã tồn tại trong danh sách\n      const filteredMovies = prevMovies.filter(m => m._id !== movie._id);\n\n      // Thêm phim mới vào đầu danh sách\n      const updatedMovies = [movie, ...filteredMovies].slice(0, MAX_RECENT_MOVIES);\n\n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.RECENT_MOVIES, updatedMovies);\n      return updatedMovies;\n    });\n  };\n\n  // Thêm/xóa phim khỏi danh sách yêu thích\n  const toggleFavoriteMovie = movie => {\n    if (!movie || !movie._id) return;\n    setFavoriteMovies(prevMovies => {\n      // Kiểm tra xem phim đã có trong danh sách yêu thích chưa\n      const isExisting = prevMovies.some(m => m._id === movie._id);\n      let updatedMovies;\n      if (isExisting) {\n        // Nếu đã có, xóa khỏi danh sách\n        updatedMovies = prevMovies.filter(m => m._id !== movie._id);\n      } else {\n        // Nếu chưa có, thêm vào danh sách\n        updatedMovies = [...prevMovies, movie].slice(0, MAX_FAVORITE_MOVIES);\n      }\n\n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.FAVORITE_MOVIES, updatedMovies);\n      return updatedMovies;\n    });\n  };\n\n  // Kiểm tra phim có trong danh sách yêu thích không\n  const isFavorite = movieId => {\n    return favoriteMovies.some(movie => movie._id === movieId);\n  };\n\n  // Cập nhật lịch sử xem phim\n  const updateWatchHistory = (movieId, episodeId, timestamp) => {\n    if (!movieId || !episodeId) return;\n    setWatchHistory(prevHistory => {\n      const updatedHistory = {\n        ...prevHistory,\n        [movieId]: {\n          ...prevHistory[movieId],\n          [episodeId]: timestamp,\n          lastWatched: Date.now()\n        }\n      };\n\n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.WATCH_HISTORY, updatedHistory);\n      return updatedHistory;\n    });\n  };\n\n  // Lấy thời điểm xem cuối cùng của một tập phim\n  const getWatchedTime = (movieId, episodeId) => {\n    if (!movieId || !episodeId || !watchHistory[movieId]) return 0;\n    return watchHistory[movieId][episodeId] || 0;\n  };\n\n  // Giá trị context\n  const value = {\n    // Metadata\n    categories,\n    countries,\n    years,\n    loading,\n    // User preferences\n    recentMovies,\n    favoriteMovies,\n    watchHistory,\n    // Functions\n    addRecentMovie,\n    toggleFavoriteMovie,\n    isFavorite,\n    updateWatchHistory,\n    getWatchedTime\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 10\n  }, this);\n};\n\n// Custom hook để sử dụng context\n_s(AppProvider, \"aQG4NKF7Z1ffCX3UQDj0E4BhBc4=\");\n_c = AppProvider;\nexport const useAppContext = () => {\n  _s2();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};\n_s2(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","metadataApi","getFromStorage","saveToStorage","STORAGE_KEYS","MAX_RECENT_MOVIES","MAX_FAVORITE_MOVIES","jsxDEV","_jsxDEV","AppContext","AppProvider","children","_s","categories","setCategories","countries","setCountries","years","setYears","loading","setLoading","recentMovies","setRecentMovies","favoriteMovies","setFavoriteMovies","watchHistory","setWatchHistory","fetchMetadata","categoriesResponse","getCategories","data","countriesResponse","getCountries","yearsResponse","getYears","error","console","storedRecentMovies","RECENT_MOVIES","storedFavoriteMovies","FAVORITE_MOVIES","storedWatchHistory","WATCH_HISTORY","addRecentMovie","movie","_id","prevMovies","filteredMovies","filter","m","updatedMovies","slice","toggleFavoriteMovie","isExisting","some","isFavorite","movieId","updateWatchHistory","episodeId","timestamp","prevHistory","updatedHistory","lastWatched","Date","now","getWatchedTime","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAppContext","_s2","context","Error","$RefreshReg$"],"sources":["D:/Phim API/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { metadataApi } from '../services/api';\nimport { getFromStorage, saveToStorage } from '../utils/utils';\nimport { STORAGE_KEYS, MAX_RECENT_MOVIES, MAX_FAVORITE_MOVIES } from '../constants/constants';\n\n// Tạo context\nconst AppContext = createContext();\n\n// Provider component\nexport const AppProvider = ({ children }) => {\n  // State cho metadata\n  const [categories, setCategories] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [years, setYears] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  // State cho user preferences\n  const [recentMovies, setRecentMovies] = useState([]);\n  const [favoriteMovies, setFavoriteMovies] = useState([]);\n  const [watchHistory, setWatchHistory] = useState({});\n  \n  // Lấy metadata khi component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        setLoading(true);\n        \n        // Lấy danh sách thể loại\n        const categoriesResponse = await metadataApi.getCategories();\n        if (categoriesResponse.data) {\n          setCategories(categoriesResponse.data);\n        }\n        \n        // Lấy danh sách quốc gia\n        const countriesResponse = await metadataApi.getCountries();\n        if (countriesResponse.data) {\n          setCountries(countriesResponse.data);\n        }\n        \n        // Lấy danh sách năm\n        const yearsResponse = await metadataApi.getYears();\n        if (yearsResponse.data) {\n          setYears(yearsResponse.data);\n        }\n        \n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching metadata:', error);\n        setLoading(false);\n      }\n    };\n    \n    fetchMetadata();\n  }, []);\n  \n  // Lấy dữ liệu từ localStorage khi component mount\n  useEffect(() => {\n    const storedRecentMovies = getFromStorage(STORAGE_KEYS.RECENT_MOVIES, []);\n    const storedFavoriteMovies = getFromStorage(STORAGE_KEYS.FAVORITE_MOVIES, []);\n    const storedWatchHistory = getFromStorage(STORAGE_KEYS.WATCH_HISTORY, {});\n    \n    setRecentMovies(storedRecentMovies);\n    setFavoriteMovies(storedFavoriteMovies);\n    setWatchHistory(storedWatchHistory);\n  }, []);\n  \n  // Thêm phim vào danh sách xem gần đây\n  const addRecentMovie = (movie) => {\n    if (!movie || !movie._id) return;\n    \n    setRecentMovies(prevMovies => {\n      // Lọc bỏ phim hiện tại nếu đã tồn tại trong danh sách\n      const filteredMovies = prevMovies.filter(m => m._id !== movie._id);\n      \n      // Thêm phim mới vào đầu danh sách\n      const updatedMovies = [movie, ...filteredMovies].slice(0, MAX_RECENT_MOVIES);\n      \n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.RECENT_MOVIES, updatedMovies);\n      \n      return updatedMovies;\n    });\n  };\n  \n  // Thêm/xóa phim khỏi danh sách yêu thích\n  const toggleFavoriteMovie = (movie) => {\n    if (!movie || !movie._id) return;\n    \n    setFavoriteMovies(prevMovies => {\n      // Kiểm tra xem phim đã có trong danh sách yêu thích chưa\n      const isExisting = prevMovies.some(m => m._id === movie._id);\n      \n      let updatedMovies;\n      \n      if (isExisting) {\n        // Nếu đã có, xóa khỏi danh sách\n        updatedMovies = prevMovies.filter(m => m._id !== movie._id);\n      } else {\n        // Nếu chưa có, thêm vào danh sách\n        updatedMovies = [...prevMovies, movie].slice(0, MAX_FAVORITE_MOVIES);\n      }\n      \n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.FAVORITE_MOVIES, updatedMovies);\n      \n      return updatedMovies;\n    });\n  };\n  \n  // Kiểm tra phim có trong danh sách yêu thích không\n  const isFavorite = (movieId) => {\n    return favoriteMovies.some(movie => movie._id === movieId);\n  };\n  \n  // Cập nhật lịch sử xem phim\n  const updateWatchHistory = (movieId, episodeId, timestamp) => {\n    if (!movieId || !episodeId) return;\n    \n    setWatchHistory(prevHistory => {\n      const updatedHistory = {\n        ...prevHistory,\n        [movieId]: {\n          ...prevHistory[movieId],\n          [episodeId]: timestamp,\n          lastWatched: Date.now(),\n        },\n      };\n      \n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.WATCH_HISTORY, updatedHistory);\n      \n      return updatedHistory;\n    });\n  };\n  \n  // Lấy thời điểm xem cuối cùng của một tập phim\n  const getWatchedTime = (movieId, episodeId) => {\n    if (!movieId || !episodeId || !watchHistory[movieId]) return 0;\n    return watchHistory[movieId][episodeId] || 0;\n  };\n  \n  // Giá trị context\n  const value = {\n    // Metadata\n    categories,\n    countries,\n    years,\n    loading,\n    \n    // User preferences\n    recentMovies,\n    favoriteMovies,\n    watchHistory,\n    \n    // Functions\n    addRecentMovie,\n    toggleFavoriteMovie,\n    isFavorite,\n    updateWatchHistory,\n    getWatchedTime,\n  };\n  \n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n\n// Custom hook để sử dụng context\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}