{"ast":null,"code":"import _objectSpread from\"D:/Phim API/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useContext,useState,useEffect}from'react';import{metadataApi}from'../services/api';import{getFromStorage,saveToStorage}from'../utils/utils';import{STORAGE_KEYS,MAX_RECENT_MOVIES,MAX_FAVORITE_MOVIES}from'../constants/constants';// Tạo context\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AppContext=/*#__PURE__*/createContext();// Provider component\nexport const AppProvider=_ref=>{let{children}=_ref;// State cho metadata\nconst[categories,setCategories]=useState([]);const[countries,setCountries]=useState([]);const[years,setYears]=useState([]);const[loading,setLoading]=useState(true);// State cho user preferences\nconst[recentMovies,setRecentMovies]=useState([]);const[favoriteMovies,setFavoriteMovies]=useState([]);const[watchHistory,setWatchHistory]=useState({});// Lấy metadata khi component mount\nuseEffect(()=>{const fetchMetadata=async()=>{try{setLoading(true);// Lấy danh sách thể loại\nconst categoriesResponse=await metadataApi.getCategories();if(categoriesResponse.data){setCategories(categoriesResponse.data);}// Lấy danh sách quốc gia\nconst countriesResponse=await metadataApi.getCountries();if(countriesResponse.data){setCountries(countriesResponse.data);}// Lấy danh sách năm\nconst yearsResponse=await metadataApi.getYears();if(yearsResponse.data){setYears(yearsResponse.data);}setLoading(false);}catch(error){console.error('Error fetching metadata:',error);setLoading(false);}};fetchMetadata();},[]);// Lấy dữ liệu từ localStorage khi component mount\nuseEffect(()=>{const storedRecentMovies=getFromStorage(STORAGE_KEYS.RECENT_MOVIES,[]);const storedFavoriteMovies=getFromStorage(STORAGE_KEYS.FAVORITE_MOVIES,[]);const storedWatchHistory=getFromStorage(STORAGE_KEYS.WATCH_HISTORY,{});setRecentMovies(storedRecentMovies);setFavoriteMovies(storedFavoriteMovies);setWatchHistory(storedWatchHistory);},[]);// Thêm phim vào danh sách xem gần đây\nconst addRecentMovie=movie=>{if(!movie||!movie._id)return;setRecentMovies(prevMovies=>{// Lọc bỏ phim hiện tại nếu đã tồn tại trong danh sách\nconst filteredMovies=prevMovies.filter(m=>m._id!==movie._id);// Thêm phim mới vào đầu danh sách\nconst updatedMovies=[movie,...filteredMovies].slice(0,MAX_RECENT_MOVIES);// Lưu vào localStorage\nsaveToStorage(STORAGE_KEYS.RECENT_MOVIES,updatedMovies);return updatedMovies;});};// Thêm/xóa phim khỏi danh sách yêu thích\nconst toggleFavoriteMovie=movie=>{if(!movie||!movie._id)return;setFavoriteMovies(prevMovies=>{// Kiểm tra xem phim đã có trong danh sách yêu thích chưa\nconst isExisting=prevMovies.some(m=>m._id===movie._id);let updatedMovies;if(isExisting){// Nếu đã có, xóa khỏi danh sách\nupdatedMovies=prevMovies.filter(m=>m._id!==movie._id);}else{// Nếu chưa có, thêm vào danh sách\nupdatedMovies=[...prevMovies,movie].slice(0,MAX_FAVORITE_MOVIES);}// Lưu vào localStorage\nsaveToStorage(STORAGE_KEYS.FAVORITE_MOVIES,updatedMovies);return updatedMovies;});};// Kiểm tra phim có trong danh sách yêu thích không\nconst isFavorite=movieId=>{return favoriteMovies.some(movie=>movie._id===movieId);};// Cập nhật lịch sử xem phim\nconst updateWatchHistory=(movieId,episodeId,timestamp)=>{if(!movieId||!episodeId)return;setWatchHistory(prevHistory=>{const updatedHistory=_objectSpread(_objectSpread({},prevHistory),{},{[movieId]:_objectSpread(_objectSpread({},prevHistory[movieId]),{},{[episodeId]:timestamp,lastWatched:Date.now()})});// Lưu vào localStorage\nsaveToStorage(STORAGE_KEYS.WATCH_HISTORY,updatedHistory);return updatedHistory;});};// Lấy thời điểm xem cuối cùng của một tập phim\nconst getWatchedTime=(movieId,episodeId)=>{if(!movieId||!episodeId||!watchHistory[movieId])return 0;return watchHistory[movieId][episodeId]||0;};// Giá trị context\nconst value={// Metadata\ncategories,countries,years,loading,// User preferences\nrecentMovies,favoriteMovies,watchHistory,// Functions\naddRecentMovie,toggleFavoriteMovie,isFavorite,updateWatchHistory,getWatchedTime};return/*#__PURE__*/_jsx(AppContext.Provider,{value:value,children:children});};// Custom hook để sử dụng context\nexport const useAppContext=()=>{const context=useContext(AppContext);if(!context){throw new Error('useAppContext must be used within an AppProvider');}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","metadataApi","getFromStorage","saveToStorage","STORAGE_KEYS","MAX_RECENT_MOVIES","MAX_FAVORITE_MOVIES","jsx","_jsx","AppContext","AppProvider","_ref","children","categories","setCategories","countries","setCountries","years","setYears","loading","setLoading","recentMovies","setRecentMovies","favoriteMovies","setFavoriteMovies","watchHistory","setWatchHistory","fetchMetadata","categoriesResponse","getCategories","data","countriesResponse","getCountries","yearsResponse","getYears","error","console","storedRecentMovies","RECENT_MOVIES","storedFavoriteMovies","FAVORITE_MOVIES","storedWatchHistory","WATCH_HISTORY","addRecentMovie","movie","_id","prevMovies","filteredMovies","filter","m","updatedMovies","slice","toggleFavoriteMovie","isExisting","some","isFavorite","movieId","updateWatchHistory","episodeId","timestamp","prevHistory","updatedHistory","_objectSpread","lastWatched","Date","now","getWatchedTime","value","Provider","useAppContext","context","Error"],"sources":["D:/Phim API/src/context/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { metadataApi } from '../services/api';\nimport { getFromStorage, saveToStorage } from '../utils/utils';\nimport { STORAGE_KEYS, MAX_RECENT_MOVIES, MAX_FAVORITE_MOVIES } from '../constants/constants';\n\n// Tạo context\nconst AppContext = createContext();\n\n// Provider component\nexport const AppProvider = ({ children }) => {\n  // State cho metadata\n  const [categories, setCategories] = useState([]);\n  const [countries, setCountries] = useState([]);\n  const [years, setYears] = useState([]);\n  const [loading, setLoading] = useState(true);\n  \n  // State cho user preferences\n  const [recentMovies, setRecentMovies] = useState([]);\n  const [favoriteMovies, setFavoriteMovies] = useState([]);\n  const [watchHistory, setWatchHistory] = useState({});\n  \n  // Lấy metadata khi component mount\n  useEffect(() => {\n    const fetchMetadata = async () => {\n      try {\n        setLoading(true);\n        \n        // Lấy danh sách thể loại\n        const categoriesResponse = await metadataApi.getCategories();\n        if (categoriesResponse.data) {\n          setCategories(categoriesResponse.data);\n        }\n        \n        // Lấy danh sách quốc gia\n        const countriesResponse = await metadataApi.getCountries();\n        if (countriesResponse.data) {\n          setCountries(countriesResponse.data);\n        }\n        \n        // Lấy danh sách năm\n        const yearsResponse = await metadataApi.getYears();\n        if (yearsResponse.data) {\n          setYears(yearsResponse.data);\n        }\n        \n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching metadata:', error);\n        setLoading(false);\n      }\n    };\n    \n    fetchMetadata();\n  }, []);\n  \n  // Lấy dữ liệu từ localStorage khi component mount\n  useEffect(() => {\n    const storedRecentMovies = getFromStorage(STORAGE_KEYS.RECENT_MOVIES, []);\n    const storedFavoriteMovies = getFromStorage(STORAGE_KEYS.FAVORITE_MOVIES, []);\n    const storedWatchHistory = getFromStorage(STORAGE_KEYS.WATCH_HISTORY, {});\n    \n    setRecentMovies(storedRecentMovies);\n    setFavoriteMovies(storedFavoriteMovies);\n    setWatchHistory(storedWatchHistory);\n  }, []);\n  \n  // Thêm phim vào danh sách xem gần đây\n  const addRecentMovie = (movie) => {\n    if (!movie || !movie._id) return;\n    \n    setRecentMovies(prevMovies => {\n      // Lọc bỏ phim hiện tại nếu đã tồn tại trong danh sách\n      const filteredMovies = prevMovies.filter(m => m._id !== movie._id);\n      \n      // Thêm phim mới vào đầu danh sách\n      const updatedMovies = [movie, ...filteredMovies].slice(0, MAX_RECENT_MOVIES);\n      \n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.RECENT_MOVIES, updatedMovies);\n      \n      return updatedMovies;\n    });\n  };\n  \n  // Thêm/xóa phim khỏi danh sách yêu thích\n  const toggleFavoriteMovie = (movie) => {\n    if (!movie || !movie._id) return;\n    \n    setFavoriteMovies(prevMovies => {\n      // Kiểm tra xem phim đã có trong danh sách yêu thích chưa\n      const isExisting = prevMovies.some(m => m._id === movie._id);\n      \n      let updatedMovies;\n      \n      if (isExisting) {\n        // Nếu đã có, xóa khỏi danh sách\n        updatedMovies = prevMovies.filter(m => m._id !== movie._id);\n      } else {\n        // Nếu chưa có, thêm vào danh sách\n        updatedMovies = [...prevMovies, movie].slice(0, MAX_FAVORITE_MOVIES);\n      }\n      \n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.FAVORITE_MOVIES, updatedMovies);\n      \n      return updatedMovies;\n    });\n  };\n  \n  // Kiểm tra phim có trong danh sách yêu thích không\n  const isFavorite = (movieId) => {\n    return favoriteMovies.some(movie => movie._id === movieId);\n  };\n  \n  // Cập nhật lịch sử xem phim\n  const updateWatchHistory = (movieId, episodeId, timestamp) => {\n    if (!movieId || !episodeId) return;\n    \n    setWatchHistory(prevHistory => {\n      const updatedHistory = {\n        ...prevHistory,\n        [movieId]: {\n          ...prevHistory[movieId],\n          [episodeId]: timestamp,\n          lastWatched: Date.now(),\n        },\n      };\n      \n      // Lưu vào localStorage\n      saveToStorage(STORAGE_KEYS.WATCH_HISTORY, updatedHistory);\n      \n      return updatedHistory;\n    });\n  };\n  \n  // Lấy thời điểm xem cuối cùng của một tập phim\n  const getWatchedTime = (movieId, episodeId) => {\n    if (!movieId || !episodeId || !watchHistory[movieId]) return 0;\n    return watchHistory[movieId][episodeId] || 0;\n  };\n  \n  // Giá trị context\n  const value = {\n    // Metadata\n    categories,\n    countries,\n    years,\n    loading,\n    \n    // User preferences\n    recentMovies,\n    favoriteMovies,\n    watchHistory,\n    \n    // Functions\n    addRecentMovie,\n    toggleFavoriteMovie,\n    isFavorite,\n    updateWatchHistory,\n    getWatchedTime,\n  };\n  \n  return <AppContext.Provider value={value}>{children}</AppContext.Provider>;\n};\n\n// Custom hook để sử dụng context\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within an AppProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}