{"ast":null,"code":"var _jsxFileName = \"D:\\\\Phim API\\\\src\\\\pages\\\\MovieDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Box, Tabs, Tab, Typography } from '@mui/material';\nimport axios from 'axios';\nimport MovieInfo from '../components/MovieInfo';\nimport VideoPlayer from '../components/VideoPlayer';\nimport EpisodeSelector from '../components/EpisodeSelector';\nimport RelatedMovies from '../components/RelatedMovies';\nimport CommentSection from '../components/CommentSection';\nimport LoadingIndicator from '../components/LoadingIndicator';\nimport ErrorDisplay from '../components/ErrorDisplay';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst MovieDetail = () => {\n  _s();\n  const {\n    slug\n  } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [currentTab, setCurrentTab] = useState(0);\n  const [currentEpisode, setCurrentEpisode] = useState(null);\n  const [currentServer, setCurrentServer] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [relatedMovies, setRelatedMovies] = useState([]);\n\n  // Lấy phim liên quan\n  const fetchRelatedMovies = useCallback(async category => {\n    try {\n      const response = await axios.get(`https://phimapi.com/v1/api/the-loai/${category}?page=1&sort_field=modified.time&sort_type=desc&limit=6`);\n      if (response.data && response.data.items) {\n        // Lọc bỏ phim hiện tại khỏi danh sách phim liên quan\n        const filtered = response.data.items.filter(item => item.slug !== slug);\n        setRelatedMovies(filtered.slice(0, 6));\n      }\n    } catch (err) {\n      console.error('Error fetching related movies:', err);\n    }\n  }, [slug]);\n\n  // Lấy thông tin phim từ API\n  useEffect(() => {\n    const fetchMovieDetail = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        const response = await axios.get(`https://phimapi.com/phim/${slug}`);\n        console.log('API Response:', response.data);\n        if (response.data) {\n          setMovie(response.data);\n          console.log('Movie data:', response.data);\n\n          // Thiết lập tập phim mặc định\n          if (response.data.episodes && Object.keys(response.data.episodes).length > 0) {\n            const firstServer = Object.keys(response.data.episodes)[0];\n            console.log('First server:', firstServer);\n            console.log('Episodes for first server:', response.data.episodes[firstServer]);\n            if (response.data.episodes[firstServer] && response.data.episodes[firstServer].length > 0) {\n              const firstEpisode = response.data.episodes[firstServer][0];\n              console.log('First episode:', firstEpisode);\n\n              // Xác định ID của tập phim\n              let episodeId;\n              if (typeof firstEpisode === 'object') {\n                episodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\n                console.log('Episode is object, ID:', episodeId);\n              } else {\n                episodeId = firstEpisode;\n                console.log('Episode is not object, ID:', episodeId);\n              }\n              if (episodeId) {\n                console.log('Setting current server to:', firstServer);\n                console.log('Setting current episode to:', episodeId);\n                setCurrentServer(firstServer);\n                setCurrentEpisode(episodeId);\n              } else {\n                console.error('Could not determine episode ID');\n              }\n            } else {\n              console.error('No episodes found for server:', firstServer);\n            }\n          } else {\n            console.error('No episodes found in movie data');\n          }\n\n          // Lấy phim liên quan\n          if (response.data.category && response.data.category.length > 0) {\n            const category = response.data.category[0].slug;\n            fetchRelatedMovies(category);\n          }\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching movie details:', err);\n        setError('Đã xảy ra lỗi khi tải thông tin phim. Vui lòng thử lại sau.');\n        setLoading(false);\n      }\n    };\n    fetchMovieDetail();\n  }, [slug, fetchRelatedMovies]);\n\n  // Xử lý khi chọn tập phim\n  const handleEpisodeSelect = (episodeId, server) => {\n    console.log('Episode selected:', {\n      episodeId,\n      server\n    });\n    setCurrentEpisode(episodeId);\n    setCurrentServer(server);\n\n    // Scroll lên đầu phần video player\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  // Xử lý khi chuyển tab\n  const handleTabChange = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(LoadingIndicator, {\n      message: \"\\u0110ang t\\u1EA3i th\\xF4ng tin phim...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(ErrorDisplay, {\n      message: error,\n      onRetry: () => window.location.reload()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 12\n    }, this);\n  }\n  if (!movie) {\n    return /*#__PURE__*/_jsxDEV(ErrorDisplay, {\n      message: \"Kh\\xF4ng t\\xECm th\\u1EA5y th\\xF4ng tin phim.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 12\n    }, this);\n  }\n\n  // Xác định URL video và tên tập phim\n  let videoUrl = null;\n  let currentEpisodeName = '';\n  let episodeTitle = '';\n  let finalVideoUrl = null;\n  if (movie && movie.episodes && currentServer && currentEpisode) {\n    console.log('Determining video URL with:', {\n      currentServer,\n      currentEpisode\n    });\n    console.log('Available episodes:', movie.episodes);\n    const serverEpisodes = movie.episodes[currentServer];\n    console.log('Server episodes:', serverEpisodes);\n    if (serverEpisodes) {\n      const episode = serverEpisodes.find(ep => {\n        if (typeof ep === 'object') {\n          return ep.slug === currentEpisode || ep.id === currentEpisode;\n        }\n        return ep === currentEpisode;\n      });\n      console.log('Found episode:', episode);\n      if (episode) {\n        if (typeof episode === 'object') {\n          videoUrl = episode;\n          currentEpisodeName = episode.name || `Tập ${episode.slug || episode.id}`;\n        } else {\n          // Nếu episode là string, thử tìm trong movie.medias\n          console.log('Episode is string, checking movie.medias');\n          if (movie.medias && Array.isArray(movie.medias)) {\n            console.log('Available medias:', movie.medias);\n            const media = movie.medias.find(m => m.filename === episode || m.slug === episode || m.id === episode);\n            console.log('Found media:', media);\n            if (media) {\n              videoUrl = media;\n              currentEpisodeName = `Tập ${episode}`;\n            } else {\n              // Nếu không tìm thấy trong medias, thử tìm theo index\n              const index = parseInt(episode, 10);\n              if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n                console.log(`Using media at index ${index}:`, movie.medias[index]);\n                videoUrl = movie.medias[index];\n                currentEpisodeName = `Tập ${episode}`;\n              } else {\n                console.error('Could not find media for episode:', episode);\n              }\n            }\n          } else {\n            console.error('No medias array found in movie data');\n          }\n        }\n      } else {\n        console.error('Episode not found in server episodes');\n\n        // Nếu không tìm thấy episode trong serverEpisodes, thử tìm trong movie.medias\n        if (movie.medias && Array.isArray(movie.medias)) {\n          console.log('Trying to find episode in movie.medias directly');\n          const index = parseInt(currentEpisode, 10);\n          if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n            console.log(`Using media at index ${index}:`, movie.medias[index]);\n            videoUrl = movie.medias[index];\n            currentEpisodeName = `Tập ${currentEpisode}`;\n          }\n        }\n      }\n    } else {\n      console.error('No episodes found for server:', currentServer);\n\n      // Nếu không có serverEpisodes, thử tìm trong movie.medias\n      if (movie.medias && Array.isArray(movie.medias)) {\n        console.log('No server episodes, trying movie.medias directly');\n        const index = parseInt(currentEpisode, 10);\n        if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n          console.log(`Using media at index ${index}:`, movie.medias[index]);\n          videoUrl = movie.medias[index];\n          currentEpisodeName = `Tập ${currentEpisode}`;\n        }\n      }\n    }\n\n    // Thiết lập finalVideoUrl ưu tiên link_embed\n    if (videoUrl) {\n      console.log('Raw videoUrl:', videoUrl);\n      if (videoUrl.link_embed) {\n        finalVideoUrl = videoUrl.link_embed;\n        console.log('Using link_embed:', finalVideoUrl);\n      } else if (videoUrl.link_m3u8) {\n        finalVideoUrl = videoUrl.link_m3u8;\n        console.log('Using link_m3u8:', finalVideoUrl);\n      } else if (videoUrl.link) {\n        finalVideoUrl = videoUrl.link;\n        console.log('Using link:', finalVideoUrl);\n      } else {\n        console.error('No valid video URL found in:', videoUrl);\n      }\n    } else {\n      console.error('No video URL found for episode:', currentEpisode);\n    }\n  } else {\n    console.log('Missing data for video URL:', {\n      hasMovie: !!movie,\n      hasEpisodes: !!(movie && movie.episodes),\n      currentServer,\n      currentEpisode\n    });\n\n    // Nếu không có episodes nhưng có medias, thử sử dụng medias trực tiếp\n    if (movie && movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0) {\n      console.log('No episodes but found medias, using first media');\n      if (!currentEpisode) {\n        setCurrentEpisode('0');\n        console.log('Setting currentEpisode to 0');\n      }\n      const index = parseInt(currentEpisode || '0', 10);\n      if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n        videoUrl = movie.medias[index];\n        console.log(`Using media at index ${index}:`, videoUrl);\n        currentEpisodeName = `Tập ${index}`;\n        if (videoUrl.link_embed) {\n          finalVideoUrl = videoUrl.link_embed;\n          console.log('Using link_embed from media:', finalVideoUrl);\n        } else if (videoUrl.link_m3u8) {\n          finalVideoUrl = videoUrl.link_m3u8;\n          console.log('Using link_m3u8 from media:', finalVideoUrl);\n        } else if (videoUrl.link) {\n          finalVideoUrl = videoUrl.link;\n          console.log('Using link from media:', finalVideoUrl);\n        }\n      }\n    }\n  }\n  episodeTitle = currentEpisodeName || (currentEpisode ? `Tập ${currentEpisode}` : '');\n  return /*#__PURE__*/_jsxDEV(Container, {\n    maxWidth: \"xl\",\n    sx: {\n      py: 4\n    },\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 2,\n        p: 2,\n        bgcolor: 'background.paper',\n        borderRadius: 1\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Debug Info:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Movie: \", movie ? 'Loaded' : 'Not loaded']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Episodes: \", movie && movie.episodes ? 'Available' : 'Not available']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Episodes Structure: \", movie && movie.episodes ? JSON.stringify(Object.keys(movie.episodes)) : 'N/A']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Current Episode: \", currentEpisode || 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Current Server: \", currentServer || 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Video URL: \", videoUrl ? typeof videoUrl === 'object' ? JSON.stringify(videoUrl) : videoUrl : 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: [\"Final Video URL: \", finalVideoUrl || 'None']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), finalVideoUrl && movie && /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        mb: 4\n      },\n      children: /*#__PURE__*/_jsxDEV(VideoPlayer, {\n        src: finalVideoUrl,\n        title: movie && movie.name ? `${movie.name} - ${episodeTitle}` : episodeTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 9\n    }, this), movie && movie.episodes && Object.keys(movie.episodes).length > 0 && /*#__PURE__*/_jsxDEV(EpisodeSelector, {\n      episodes: movie.episodes,\n      currentEpisode: currentEpisode,\n      onEpisodeSelect: handleEpisodeSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        borderBottom: 1,\n        borderColor: 'divider',\n        mb: 3\n      },\n      children: /*#__PURE__*/_jsxDEV(Tabs, {\n        value: currentTab,\n        onChange: handleTabChange,\n        variant: \"scrollable\",\n        scrollButtons: \"auto\",\n        allowScrollButtonsMobile: true,\n        \"aria-label\": \"movie detail tabs\",\n        children: [/*#__PURE__*/_jsxDEV(Tab, {\n          label: \"Th\\xF4ng tin phim\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Tab, {\n          label: \"B\\xECnh lu\\u1EADn\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      role: \"tabpanel\",\n      hidden: currentTab !== 0,\n      children: currentTab === 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(MovieInfo, {\n          movie: movie\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(RelatedMovies, {\n          movies: relatedMovies\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      role: \"tabpanel\",\n      hidden: currentTab !== 1,\n      children: currentTab === 1 && movie && movie._id && /*#__PURE__*/_jsxDEV(CommentSection, {\n        movieId: movie._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 52\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n};\n_s(MovieDetail, \"Uex7VqTs7/JRnu58llJ3FmQ7U8s=\", false, function () {\n  return [useParams];\n});\n_c = MovieDetail;\nexport default MovieDetail;\n\n// Thiết lập tập phim mặc định\nuseEffect(() => {\n  // Nếu đã có movie và episodes nhưng chưa có currentEpisode hoặc currentServer\n  if (movie && movie.episodes && Object.keys(movie.episodes).length > 0 && (!currentEpisode || !currentServer)) {\n    console.log('Setting default episode and server');\n    const firstServer = Object.keys(movie.episodes)[0];\n    console.log('First server:', firstServer);\n    console.log('Episodes for first server:', movie.episodes[firstServer]);\n    if (movie.episodes[firstServer] && movie.episodes[firstServer].length > 0) {\n      const firstEpisode = movie.episodes[firstServer][0];\n      console.log('First episode:', firstEpisode);\n\n      // Xác định ID của tập phim\n      let episodeId;\n      if (typeof firstEpisode === 'object') {\n        episodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\n        console.log('Episode is object, ID:', episodeId);\n      } else {\n        episodeId = firstEpisode;\n        console.log('Episode is not object, ID:', episodeId);\n      }\n      if (episodeId) {\n        console.log('Setting current server to:', firstServer);\n        console.log('Setting current episode to:', episodeId);\n        setCurrentServer(firstServer);\n        setCurrentEpisode(episodeId);\n      } else {\n        console.error('Could not determine episode ID');\n      }\n    } else {\n      console.error('No episodes found for server:', firstServer);\n    }\n  } else if (movie && movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0 && !currentEpisode) {\n    // Nếu không có episodes nhưng có medias, sử dụng medias trực tiếp\n    console.log('No episodes but found medias, using first media as default');\n    setCurrentEpisode('0');\n    setCurrentServer('0'); // Sử dụng '0' làm server mặc định\n    console.log('Setting currentEpisode and currentServer to 0');\n  }\n}, [movie, currentEpisode, currentServer]);\nvar _c;\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useParams","Container","Box","Tabs","Tab","Typography","axios","MovieInfo","VideoPlayer","EpisodeSelector","RelatedMovies","CommentSection","LoadingIndicator","ErrorDisplay","jsxDEV","_jsxDEV","Fragment","_Fragment","MovieDetail","_s","slug","movie","setMovie","currentTab","setCurrentTab","currentEpisode","setCurrentEpisode","currentServer","setCurrentServer","loading","setLoading","error","setError","relatedMovies","setRelatedMovies","fetchRelatedMovies","category","response","get","data","items","filtered","filter","item","slice","err","console","fetchMovieDetail","log","episodes","Object","keys","length","firstServer","firstEpisode","episodeId","id","filename","handleEpisodeSelect","server","window","scrollTo","top","behavior","handleTabChange","event","newValue","message","fileName","_jsxFileName","lineNumber","columnNumber","onRetry","location","reload","videoUrl","currentEpisodeName","episodeTitle","finalVideoUrl","serverEpisodes","episode","find","ep","name","medias","Array","isArray","media","m","index","parseInt","isNaN","link_embed","link_m3u8","link","hasMovie","hasEpisodes","maxWidth","sx","py","children","mb","p","bgcolor","borderRadius","variant","JSON","stringify","src","title","onEpisodeSelect","borderBottom","borderColor","value","onChange","scrollButtons","allowScrollButtonsMobile","label","role","hidden","movies","_id","movieId","_c","$RefreshReg$"],"sources":["D:/Phim API/src/pages/MovieDetail.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Box, Tabs, Tab, Typography } from '@mui/material';\nimport axios from 'axios';\n\nimport MovieInfo from '../components/MovieInfo';\nimport VideoPlayer from '../components/VideoPlayer';\nimport EpisodeSelector from '../components/EpisodeSelector';\nimport RelatedMovies from '../components/RelatedMovies';\nimport CommentSection from '../components/CommentSection';\nimport LoadingIndicator from '../components/LoadingIndicator';\nimport ErrorDisplay from '../components/ErrorDisplay';\n\nconst MovieDetail = () => {\n  const { slug } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [currentTab, setCurrentTab] = useState(0);\n  const [currentEpisode, setCurrentEpisode] = useState(null);\n  const [currentServer, setCurrentServer] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [relatedMovies, setRelatedMovies] = useState([]);\n\n  // Lấy phim liên quan\n  const fetchRelatedMovies = useCallback(async (category) => {\n    try {\n      const response = await axios.get(\n        `https://phimapi.com/v1/api/the-loai/${category}?page=1&sort_field=modified.time&sort_type=desc&limit=6`\n      );\n      if (response.data && response.data.items) {\n        // Lọc bỏ phim hiện tại khỏi danh sách phim liên quan\n        const filtered = response.data.items.filter(item => item.slug !== slug);\n        setRelatedMovies(filtered.slice(0, 6));\n      }\n    } catch (err) {\n      console.error('Error fetching related movies:', err);\n    }\n  }, [slug]);\n\n  // Lấy thông tin phim từ API\n  useEffect(() => {\n    const fetchMovieDetail = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n\n        const response = await axios.get(`https://phimapi.com/phim/${slug}`);\n        console.log('API Response:', response.data);\n        if (response.data) {\n          setMovie(response.data);\n          console.log('Movie data:', response.data);\n          \n          // Thiết lập tập phim mặc định\n          if (response.data.episodes && Object.keys(response.data.episodes).length > 0) {\n            const firstServer = Object.keys(response.data.episodes)[0];\n            console.log('First server:', firstServer);\n            console.log('Episodes for first server:', response.data.episodes[firstServer]);\n            \n            if (response.data.episodes[firstServer] && response.data.episodes[firstServer].length > 0) {\n              const firstEpisode = response.data.episodes[firstServer][0];\n              console.log('First episode:', firstEpisode);\n              \n              // Xác định ID của tập phim\n              let episodeId;\n              if (typeof firstEpisode === 'object') {\n                episodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\n                console.log('Episode is object, ID:', episodeId);\n              } else {\n                episodeId = firstEpisode;\n                console.log('Episode is not object, ID:', episodeId);\n              }\n              \n              if (episodeId) {\n                console.log('Setting current server to:', firstServer);\n                console.log('Setting current episode to:', episodeId);\n                setCurrentServer(firstServer);\n                setCurrentEpisode(episodeId);\n              } else {\n                console.error('Could not determine episode ID');\n              }\n            } else {\n              console.error('No episodes found for server:', firstServer);\n            }\n          } else {\n            console.error('No episodes found in movie data');\n          }\n\n          // Lấy phim liên quan\n          if (response.data.category && response.data.category.length > 0) {\n            const category = response.data.category[0].slug;\n            fetchRelatedMovies(category);\n          }\n        }\n        setLoading(false);\n      } catch (err) {\n        console.error('Error fetching movie details:', err);\n        setError('Đã xảy ra lỗi khi tải thông tin phim. Vui lòng thử lại sau.');\n        setLoading(false);\n      }\n    };\n\n    fetchMovieDetail();\n  }, [slug, fetchRelatedMovies]);\n\n  // Xử lý khi chọn tập phim\n  const handleEpisodeSelect = (episodeId, server) => {\n    console.log('Episode selected:', { episodeId, server });\n    setCurrentEpisode(episodeId);\n    setCurrentServer(server);\n    \n    // Scroll lên đầu phần video player\n    window.scrollTo({\n      top: 0,\n      behavior: 'smooth'\n    });\n  };\n\n  // Xử lý khi chuyển tab\n  const handleTabChange = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  if (loading) {\n    return <LoadingIndicator message=\"Đang tải thông tin phim...\" />;\n  }\n\n  if (error) {\n    return <ErrorDisplay message={error} onRetry={() => window.location.reload()} />;\n  }\n\n  if (!movie) {\n    return <ErrorDisplay message=\"Không tìm thấy thông tin phim.\" />;\n  }\n\n  // Xác định URL video và tên tập phim\n  let videoUrl = null;\n  let currentEpisodeName = '';\n  let episodeTitle = '';\n  let finalVideoUrl = null;\n\n  if (movie && movie.episodes && currentServer && currentEpisode) {\n    console.log('Determining video URL with:', { currentServer, currentEpisode });\n    console.log('Available episodes:', movie.episodes);\n    \n    const serverEpisodes = movie.episodes[currentServer];\n    console.log('Server episodes:', serverEpisodes);\n    \n    if (serverEpisodes) {\n      const episode = serverEpisodes.find(ep => {\n        if (typeof ep === 'object') {\n          return (ep.slug === currentEpisode || ep.id === currentEpisode);\n        }\n        return ep === currentEpisode;\n      });\n      \n      console.log('Found episode:', episode);\n      \n      if (episode) {\n        if (typeof episode === 'object') {\n          videoUrl = episode;\n          currentEpisodeName = episode.name || `Tập ${episode.slug || episode.id}`;\n        } else {\n          // Nếu episode là string, thử tìm trong movie.medias\n          console.log('Episode is string, checking movie.medias');\n          if (movie.medias && Array.isArray(movie.medias)) {\n            console.log('Available medias:', movie.medias);\n            const media = movie.medias.find(m => m.filename === episode || m.slug === episode || m.id === episode);\n            console.log('Found media:', media);\n            if (media) {\n              videoUrl = media;\n              currentEpisodeName = `Tập ${episode}`;\n            } else {\n              // Nếu không tìm thấy trong medias, thử tìm theo index\n              const index = parseInt(episode, 10);\n              if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n                console.log(`Using media at index ${index}:`, movie.medias[index]);\n                videoUrl = movie.medias[index];\n                currentEpisodeName = `Tập ${episode}`;\n              } else {\n                console.error('Could not find media for episode:', episode);\n              }\n            }\n          } else {\n            console.error('No medias array found in movie data');\n          }\n        }\n      } else {\n        console.error('Episode not found in server episodes');\n        \n        // Nếu không tìm thấy episode trong serverEpisodes, thử tìm trong movie.medias\n        if (movie.medias && Array.isArray(movie.medias)) {\n          console.log('Trying to find episode in movie.medias directly');\n          const index = parseInt(currentEpisode, 10);\n          if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n            console.log(`Using media at index ${index}:`, movie.medias[index]);\n            videoUrl = movie.medias[index];\n            currentEpisodeName = `Tập ${currentEpisode}`;\n          }\n        }\n      }\n    } else {\n      console.error('No episodes found for server:', currentServer);\n      \n      // Nếu không có serverEpisodes, thử tìm trong movie.medias\n      if (movie.medias && Array.isArray(movie.medias)) {\n        console.log('No server episodes, trying movie.medias directly');\n        const index = parseInt(currentEpisode, 10);\n        if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n          console.log(`Using media at index ${index}:`, movie.medias[index]);\n          videoUrl = movie.medias[index];\n          currentEpisodeName = `Tập ${currentEpisode}`;\n        }\n      }\n    }\n    \n    // Thiết lập finalVideoUrl ưu tiên link_embed\n    if (videoUrl) {\n      console.log('Raw videoUrl:', videoUrl);\n      if (videoUrl.link_embed) {\n        finalVideoUrl = videoUrl.link_embed;\n        console.log('Using link_embed:', finalVideoUrl);\n      } else if (videoUrl.link_m3u8) {\n        finalVideoUrl = videoUrl.link_m3u8;\n        console.log('Using link_m3u8:', finalVideoUrl);\n      } else if (videoUrl.link) {\n        finalVideoUrl = videoUrl.link;\n        console.log('Using link:', finalVideoUrl);\n      } else {\n        console.error('No valid video URL found in:', videoUrl);\n      }\n    } else {\n      console.error('No video URL found for episode:', currentEpisode);\n    }\n  } else {\n    console.log('Missing data for video URL:', { \n      hasMovie: !!movie, \n      hasEpisodes: !!(movie && movie.episodes), \n      currentServer, \n      currentEpisode \n    });\n    \n    // Nếu không có episodes nhưng có medias, thử sử dụng medias trực tiếp\n    if (movie && movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0) {\n      console.log('No episodes but found medias, using first media');\n      if (!currentEpisode) {\n        setCurrentEpisode('0');\n        console.log('Setting currentEpisode to 0');\n      }\n      \n      const index = parseInt(currentEpisode || '0', 10);\n      if (!isNaN(index) && index >= 0 && index < movie.medias.length) {\n        videoUrl = movie.medias[index];\n        console.log(`Using media at index ${index}:`, videoUrl);\n        currentEpisodeName = `Tập ${index}`;\n        \n        if (videoUrl.link_embed) {\n          finalVideoUrl = videoUrl.link_embed;\n          console.log('Using link_embed from media:', finalVideoUrl);\n        } else if (videoUrl.link_m3u8) {\n          finalVideoUrl = videoUrl.link_m3u8;\n          console.log('Using link_m3u8 from media:', finalVideoUrl);\n        } else if (videoUrl.link) {\n          finalVideoUrl = videoUrl.link;\n          console.log('Using link from media:', finalVideoUrl);\n        }\n      }\n    }\n  }\n\n  episodeTitle = currentEpisodeName || (currentEpisode ? `Tập ${currentEpisode}` : '');\n\n  return (\n    <Container maxWidth=\"xl\" sx={{ py: 4 }}>\n      {/* Debug Info */}\n      <Box sx={{ mb: 2, p: 2, bgcolor: 'background.paper', borderRadius: 1 }}>\n        <Typography variant=\"h6\">Debug Info:</Typography>\n        <Typography variant=\"body2\">Movie: {movie ? 'Loaded' : 'Not loaded'}</Typography>\n        <Typography variant=\"body2\">Episodes: {movie && movie.episodes ? 'Available' : 'Not available'}</Typography>\n        <Typography variant=\"body2\">Episodes Structure: {movie && movie.episodes ? JSON.stringify(Object.keys(movie.episodes)) : 'N/A'}</Typography>\n        <Typography variant=\"body2\">Current Episode: {currentEpisode || 'None'}</Typography>\n        <Typography variant=\"body2\">Current Server: {currentServer || 'None'}</Typography>\n        <Typography variant=\"body2\">Video URL: {videoUrl ? (typeof videoUrl === 'object' ? JSON.stringify(videoUrl) : videoUrl) : 'None'}</Typography>\n        <Typography variant=\"body2\">Final Video URL: {finalVideoUrl || 'None'}</Typography>\n      </Box>\n\n      {/* Video Player */}\n      {finalVideoUrl && movie && (\n        <Box sx={{ mb: 4 }}>\n          <VideoPlayer\n            src={finalVideoUrl}\n            title={movie && movie.name ? `${movie.name} - ${episodeTitle}` : episodeTitle}\n          />\n        </Box>\n      )}\n\n      {/* Episode Selector */}\n      {movie && movie.episodes && Object.keys(movie.episodes).length > 0 && (\n        <EpisodeSelector\n          episodes={movie.episodes}\n          currentEpisode={currentEpisode}\n          onEpisodeSelect={handleEpisodeSelect}\n        />\n      )}\n\n      {/* Tabs */}\n      <Box sx={{ borderBottom: 1, borderColor: 'divider', mb: 3 }}>\n        <Tabs\n          value={currentTab}\n          onChange={handleTabChange}\n          variant=\"scrollable\"\n          scrollButtons=\"auto\"\n          allowScrollButtonsMobile\n          aria-label=\"movie detail tabs\"\n        >\n          <Tab label=\"Thông tin phim\" />\n          <Tab label=\"Bình luận\" />\n        </Tabs>\n      </Box>\n\n      {/* Tab Content */}\n      <Box role=\"tabpanel\" hidden={currentTab !== 0}>\n        {currentTab === 0 && (\n          <>\n            <MovieInfo movie={movie} />\n            <RelatedMovies movies={relatedMovies} />\n          </>\n        )}\n      </Box>\n\n      <Box role=\"tabpanel\" hidden={currentTab !== 1}>\n        {currentTab === 1 && movie && movie._id && <CommentSection movieId={movie._id} />}\n      </Box>\n    </Container>\n  );\n};\n\nexport default MovieDetail;\n\n// Thiết lập tập phim mặc định\nuseEffect(() => {\n// Nếu đã có movie và episodes nhưng chưa có currentEpisode hoặc currentServer\nif (movie && movie.episodes && Object.keys(movie.episodes).length > 0 && (!currentEpisode || !currentServer)) {\nconsole.log('Setting default episode and server');\nconst firstServer = Object.keys(movie.episodes)[0];\nconsole.log('First server:', firstServer);\nconsole.log('Episodes for first server:', movie.episodes[firstServer]);\n\nif (movie.episodes[firstServer] && movie.episodes[firstServer].length > 0) {\nconst firstEpisode = movie.episodes[firstServer][0];\nconsole.log('First episode:', firstEpisode);\n\n// Xác định ID của tập phim\nlet episodeId;\nif (typeof firstEpisode === 'object') {\nepisodeId = firstEpisode.slug || firstEpisode.id || firstEpisode.filename;\nconsole.log('Episode is object, ID:', episodeId);\n} else {\nepisodeId = firstEpisode;\nconsole.log('Episode is not object, ID:', episodeId);\n}\n\nif (episodeId) {\nconsole.log('Setting current server to:', firstServer);\nconsole.log('Setting current episode to:', episodeId);\nsetCurrentServer(firstServer);\nsetCurrentEpisode(episodeId);\n} else {\nconsole.error('Could not determine episode ID');\n}\n} else {\nconsole.error('No episodes found for server:', firstServer);\n}\n} else if (movie && movie.medias && Array.isArray(movie.medias) && movie.medias.length > 0 && !currentEpisode) {\n// Nếu không có episodes nhưng có medias, sử dụng medias trực tiếp\nconsole.log('No episodes but found medias, using first media as default');\nsetCurrentEpisode('0');\nsetCurrentServer('0'); // Sử dụng '0' làm server mặc định\nconsole.log('Setting currentEpisode and currentServer to 0');\n}\n}, [movie, currentEpisode, currentServer]);"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}